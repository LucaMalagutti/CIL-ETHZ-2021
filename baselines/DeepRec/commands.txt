# Additional packages:
tensorflow
scipy
wandb

# Convert CIL train data for DeepRec (default 90/10 train/val) (from CIL-2021 folder)
python baselines/DeepRec/data_utils/CIL_data_converter.py data/data_train.csv

# Convert CIL submission data for DeepRec (from CIL-2021 folder)
python baselines/DeepRec/data_utils/CIL_data_converter.py data/sample_submission.csv submission

# Train (from baselines/DeepRec/ folder)
cd baselines\DeepRec
python run.py --layer1_dim 128 --layer2_dim 64 --layer3_dim 128 --batch_size 128 --dropout 0.1 --learning_rate 0.005 --weight_decay 0 --dense_refeeding_steps 1 --noise_prob 0.0 --num_epochs 50

# Generate predictions (from CIL-2021 folder)
python baselines/DeepRec/infer.py --path_to_train_data baselines/DeepRec/data/train --path_to_eval_data baselines/DeepRec/data/submission --hidden_layers 256,32,256 --non_linearity_type selu --save_path baselines/DeepRec/model_save/modelVal0.9809.epoch_84 --drop_prob 0.0 --predictions_path baselines/DeepRec/preds.csv

# Wandb sweep

# BayesianSVD++

# install libfm first
git clone https://github.com/srendle/libfm /home/libfm
cd /home/libfm/
make all
export LIBFM_PATH=/home/libfm/bin/

# convert train and test (submission) to libfm format from /home/libfm/scripts folder
./triple_format_to_libfm.pl -in /home/ico/PycharmProjects/CIL-2021/baselines/DeepRec/data/train/CIL_data100.train,/home/ico/PycharmProjects/CIL-2021/baselines/DeepRec/data/submission/CIL_data.submission -target 2 -separator "\t"

# train libfm from /home/libfm/bin folder (Bayesian SVD++ w/o implicit user information)
./libFM -task r -train /home/ico/PycharmProjects/CIL-2021/baselines/DeepRec/data/train/CIL_data100.train.libfm -test /home/ico/PycharmProjects/CIL-2021/baselines/DeepRec/data/submission/CIL_data.submission.libfm -dim 1,1,16 -iter 460 -verbosity 1 -out /home/ico/PycharmProjects/CIL-2021/baselines/DeepRec/data/submission/libfmPrediction

# (edit file paths and) run Libfm_submission_converter.py


--- BayesianSVD++ with deep features from DeepRec
# extract deep features for every user (with 100% of training data processed through DeepRec trained on 90% of data)
python baselines/DeepRec/infer_deepfeatures.py --path_to_train_data baselines/DeepRec/data/train100 --path_to_eval_data baselines/DeepRec/data/train100 --hidden_layers 256,32,256 --non_linearity_type selu --save_path baselines/DeepRec/model_save/modelVal0.9809.epoch_84 --drop_prob 0.0 --predictions_path baselines/DeepRec/deepfeatures.json



